generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String    @id
  name          String    @db.VarChar(255)
  email         String    @db.VarChar(255)
  emailVerified Boolean   @db.Boolean
  image         String?
  createdAt     DateTime  @db.Timestamp()
  updatedAt     DateTime  @db.Timestamp()
  sessions      Session[]
  accounts      Account[]
  forms         Form[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime @db.Timestamp()
  token     String
  createdAt DateTime @db.Timestamp()
  updatedAt DateTime @db.Timestamp()
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime? @db.Timestamp()
  refreshTokenExpiresAt DateTime? @db.Timestamp()
  scope                 String?
  password              String?
  createdAt             DateTime  @db.Timestamp()
  updatedAt             DateTime  @db.Timestamp()

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime  @db.Timestamp()
  createdAt  DateTime? @db.Timestamp()
  updatedAt  DateTime? @db.Timestamp()

  @@map("verification")
}

model Form {
  id           String   @id @default(uuid()) @db.Uuid
  userId       String
  userRef      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title        String   @db.VarChar(255)
  slug         String
  customDomain String?
  brandLogo    String?
  brandTitle   String   @db.VarChar(255)
  isActive     Boolean  @default(true) @db.Boolean
  isVideoForm  Boolean  @default(false) @db.Boolean
  createdAt    DateTime @default(now()) @db.Timestamp()
  updatedAt    DateTime @default(now()) @updatedAt @db.Timestamp()

  testimonials Testimonial[]
}

model Testimonial {
  id          String               @id @default(uuid()) @db.Uuid
  name        String               @db.VarChar(255)
  email       String?              @db.VarChar(255)
  phoneNumber String?              @db.VarChar(255)
  formId      String               @db.Uuid
  formRef     Form                 @relation(fields: [formId], references: [id])
  rating      Int                  @db.SmallInt
  content     String?              @db.Text
  avatar      String?
  video       String?
  isApproved  Boolean              @default(false) @db.Boolean
  status      TestimonialStateEnum @default(pending)
  createdAt   DateTime             @default(now()) @db.Timestamp()
  updatedAt   DateTime             @default(now()) @updatedAt @db.Timestamp()
}

enum TestimonialStateEnum {
  pending
  approved
  rejected
}
